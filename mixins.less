// Grid row
//
// The job of a row is to clear floats, and ensure its content starts on a new line.
// It should not set vertical margins nor limit width, those are others' responsibilities.
//
// Parameters: 
// @gutter - Set horizontal distance between columns. By default uses value from config. Example: 20px
//
.grid-row(@gutter: @gutterWidth) {
    .clearfix();
    .grid-row-gutter(@gutter);    
    list-style: none;
    padding: 0;

    & when (@applyBorderBox) {
        box-sizing: border-box;
    }
}

// Grid row gutter
// counteracts the column gutter to remove spacing on the outer left and right.
// Can be used in a responsive setting to redefine the gutter without repeating clearfix etc.
//
// Parameters: 
// @gutter
//
.grid-row-gutter(@gutter) {
    @m: (@gutter / 2) * -1;
    margin-left: @m;
    margin-right: @m;
}

// Span
//
// Applies to children of grid row.
//
// Parameters:
// @span - Set how many columns the element should span. Example: 4
//   
.grid-span(@span) {
    .grid-calcWidth(@span);
    width: @width;
}

// Grid span gutter
// Can be used in a responsive setting to redefine the gutter without repeating clearfix etc.
//
// Parameters: 
// @gutter
//
.grid-span-gutter(@gutter) {
    padding-left: (@gutter / 2);        
    padding-right: (@gutter / 2);   
}

// Push
//
// Move element to the right by a given number of columns.
// If you have two columns, where both spans 6 columns, and you want to use push and pull
// to visually switch theirs place, you would have to apply a push(6) to column 1, and pull(6) to column 2.
//
// Parameters:
// @span - Set how many columns the element should move to the right. Example: 4
//   
.grid-push(@span) {
    .grid-calcWidth(@span);
    left: @width;
}

// Pull
//
// Move element to the left by a given number of columns.
//
// Parameters:
// @span - Set how many columns the element should move to the right. Example: 4
//   
.grid-pull(@span) {
    .grid-calcWidth(@span);
    right: @width;
}

// Calculate column width
//
// Parameters:
// @span - How many columns to return the width of
//
.grid-calcWidth(@span) {

    .calc(@span) when (@span = round(@span)) {
        @width: ((100 / @columns) * @span) * 1%;
    }

    // support fractions, e.g. .grid-calcWidth(1/3);
    .calc(@span) when not (@span = round(@span)) {
        @width: @span * 100%;
    }
    
    .calc(@span);
}

// Styles shared by all spans
.grid-spanBase(@gutter: @gutterWidth) {
    .grid-span-gutter(@gutter);
    float: left;
    position: relative;
         
    & when (@applyBorderBox) {
        box-sizing: border-box;
    }
}

// Generate grid classes
//
// The following block will generate .span, .push and .pull classes for a given number of columns
//
// @columns - number of columns
// @keyword - a string inserted after the prefix, used for e.g. separating responsive classes. E.g. The keyword value "m-" could create .span-m-10 { ... } 
.grid-generate(@columns: @columns, @keyword: ~"", @gutter: @gutterWidth) {
    
    .loop (@index) when (@index > 0) {
      @newClassName: ~"@{columnClassName}@{keyword}@{index}"; 

      .@{newClassName} { 
          .grid-span(@index);
      }
      
      & when (@generatePullClasses) {
          .@{pullClassName}@{keyword}@{index} { 
              .grid-pull(@index);
          }
      }

      & when (@generatePushClasses) {
          .@{pushClassName}@{keyword}@{index} { 
              .grid-push(@index);
          }  
      }

      .loop (@index - 1);
    }

    & when not (@gutter = @gutterWidth) {
        .@{rowClassName} {
            .grid-row-gutter(@gutter);
        }
        .@{rowClassName} [class*=~"@{columnClassName}@{keyword}"] {
            .grid-span-gutter(@gutter);    
        }
    }

    .loop (@columns);  

}
//@todo delete?
.clearfix() {
    &:before,
    &:after {
        content: " ";
        display: table;
    }
    &:after {
        clear: both;
    }
}