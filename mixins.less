// Grid row
//
// The job of a row is to clear floats, and ensure its content starts on a new line.
// It should not set vertical margins nor limit width, those are others' responsibilities.
//
// Parameters: 
// @gutter - Set horizontal distance between columns. By default uses value from config. Example: 20px
//
.grid-row(@gutter: @gutterWidth) {
    @m: (@gutterWidth / 2) * -1;

    .clearfix();
    
    list-style: none;
    padding: 0;
    overflow: hidden;
    margin-left: @m;
    margin-right: @m;
    
    & when (@applyBorderBox) {
        border-box: border-box;
    }
}

// Span
//
// Applies to children of grid row.
//
// Parameters:
// @span - Set how many columns the element should span. Example: 4
//   
.grid-span(@span) {
    &:extend(.grid-spanBase);
    .grid-calcWidth(@span);
    width: @width;
}

// Push
//
// Move element to the right by a given number of columns.
// If you have two columns, where both spans 6 columns, and you want to use push and pull
// to visually switch theirs place, you would have to apply a push(6) to column 1, and pull(6) to column 2.
//
// Parameters:
// @span - Set how many columns the element should move to the right. Example: 4
//   
.grid-push(@span) {
    .grid-calcWidth(@span);
    margin-left: @width;
}

// Pull
//
// Move element to the left by a given number of columns.
//
// Parameters:
// @span - Set how many columns the element should move to the right. Example: 4
//   
.grid-pull(@span) {
    .grid-calcWidth(@span);
    margin-left: -@width;
}

// Calculate column width
//
// Parameters:
// @span - How many columns to return the width of
//
.grid-calcWidth(@span) {

    .calc(@span) when (@span = round(@span)) {
        @width: ((100 / @columns) * @span) * 1%;
    }

    // support fractions, e.g. .grid-calcWidth(1/3);
    .calc(@span) when not (@span = round(@span)) {
        @width: @span * 100%;
    }
    
    .calc(@span);
}

// This is to output the helpers within media queries, otherwise they can't be used with extend().
.grid-outputHelpers() {
    .grid-spanBase {
        float: left;
        padding-left: (@gutterWidth / 2);        
        padding-right: (@gutterWidth / 2);        
        & when (@applyBorderBox) {
            border-box: border-box;
        }
    }
}

//@todo delete?
.clearfix() {
    &:before,
    &:after {
        content: " ";
        display: table;
    }
    &:after {
        clear: both;
    }
}